```{r setup, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE, include=FALSE}

#install.packages("")

library(dplyr)
library(tidyverse)
library(tidycensus)
library(readxl)
library(stringr)
library(tigris)
library(sf) 
library(tmap)
library(mapboxapi)
library(tmap)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(plotly)
library(huxtable)
library(table1)
library(kableExtra)
library(sjmisc)
library(gapminder)


mb_access_token("sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg", overwrite=TRUE, install = TRUE)

```

## The Background

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

v = load_variables(2022, "acs1", cache = TRUE)
View(v)

#B05010_002 - total ratio for income to poverty level, children under 18
#B05010_003 - two parents
#B05010_004 - two parents native
#B05010_005 - two parents foreign born
#B05010_006 - one native one foreign born parents
#B05010_007 - one parent
#B05010_008 - one parent native
#B05010_009 - one parent foreign born


```

```{r}

ma_race_md <- get_acs(
  geography = "county",
  variables = c(
    "White" = "B03002_003",
    "Black" = "B03002_004",
    "Native" = "B03002_005",
    "Asian" = "B03002_006",
    "Pacific_Islander" = "B03002_007",
    "Other_Race" = "B03002_008",
    "Two_or_More_Races" = "B03002_009"
  ),
  state = "MA",
  geometry = TRUE,
  resolution = "20m",
   output = "wide"
)

ma_race_md = ma_race_md %>%
  rename("Black" = "BlackE",
         "White" = "WhiteE",
         "Asian" = "AsianE")

ma_race_md = ma_race_md %>%
 pivot_longer(c('Black', 'White', 'Asian'),
              names_to = 'Race',
              values_to = 'Population')

map_race = tm_shape(ma_race_md, projection="+proj=eck4") +
  tm_polygons(n = 6,
              id = "NAME",
              col = "black",
              fill = "Race", 
              palette = c("red", "blue", "green"),
              title = "ACS Estimate",
              legend.hist = TRUE,
              alpha = 0.7,
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) +
  tm_borders(lwd = .50,
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0),
            title.size=.8,
            title = "Population by Race in MA",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica")


map_race

```

```{r}


my_variables1 = c(
  White = "B03002_003"
  )

d_acs = get_acs(
  geography = "county",
  variables = my_variables1, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

d_acs$NAME <- gsub(" County, Massachusetts", "", d_acs$NAME)

map1 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate, 2022",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "MA Population, White Alone",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 
#+ tm_text("NAME", size = 0.5, root = 2, col = "black")

```

```{r}

map1 + tm_view(set.view = c(-71.5, 42.3, 7.5))

```


```{r}

my_variables2 = c(
  Black = "B03002_004", 
  Hispanic = "B03002_012",
  Asian = "B03002_006"
  )

d_acs = get_acs(
  geography = "county",
  variables = my_variables2, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

d_acs$NAME <- gsub(" County, Massachusetts", "", d_acs$NAME)

map2 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate, 2022",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "MA Population, Nonwhite",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica")
#+ tm_text("NAME", size = 0.5, root = 2, col = "black")


```

```{r}

map2 + tm_view(set.view = c(-71.5, 42.3, 7.5))

```


```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

#v = load_variables(2022, "acs1", cache = TRUE)
#View(v)

# B11012_003 = Married-couple household, With children of the householder under 18 years
# B11012_010 = Female householder, With children of the householder under 18 years
#	B11012_015 = Male householder, With children of the householder under 18 years
# B11017_001 = multi-generational households, total

# B17010B_004 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (Black or African American Alone Householder)
# B17010A_024 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (white)
# B17010C_024 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (Native American)
# B17010D_024 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (Asian)
# B17010G_024 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (two or more races)
# B17010I_004 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (hispanic)


my_variables3 = c(
  Asian = "B03002_006"
  )

d_acs = get_acs(
  geography = "county",
  variables = my_variables3, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

d_acs$NAME <- gsub(" County, Massachusetts", "", d_acs$NAME)

specific_county <- "Barnstable"
barnstable_data <- d_acs[d_acs$NAME == specific_county, ]

map3 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate, 2022",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "MA Population, Asian Alone",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 
#+ tm_text("NAME", size = 0.6, root = 1, col = "black") 

map3


```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}

map3 + tm_view(set.view = c(-71.5, 42.3, 7.5))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

# B25012_011 = Renter-occupied housing units With related children of the householder under 18:

# B19001A_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (White)
# B19001B_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Black)
# B19001C_001 = native
# B19001D_001 = asian 
# B19001I_001 = hispanic
# B19001_001 = average

renter_children = "B25012_011"

d_acs = get_acs(
  geography = "county",
  variables = renter_children, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

d_acs$NAME <- gsub(" County, Massachusetts", "", d_acs$NAME)


map4 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Renter-Occupied Housing With Children Under 18",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 

```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}


map4 + tm_view(set.view = c(-71.5, 42.3, 7.5))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

# B25012_011 = Renter-occupied housing units With related children of the householder under 18:

# B19001A_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (White)
# B19001B_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Black)
# B19001C_001 = native
# B19001D_001 = asian 
# B19001I_001 = hispanic
# B19001_001 = average

income_white = "B19001A_001"
income_black = "B19001B_001" 

d_acs = get_acs(
  geography = "county",
  variables = income_white, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

d_acs$NAME <- gsub(" County, Massachusetts", "", d_acs$NAME)


map5 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Greens",
              title = "ACS Estimate, 2022",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Average Household Income of White families in MA",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 

#tmap_save(map5, "Income_White_families.png")

```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}


map5 + tm_view(set.view = c(-71.5, 42.3, 7.5))

```

```{r}

my_variables_income <- c(
  Black = "B19001B_001", 
  Hispanic = "B19001I_001",
  Asian = "B19001D_001",
  White = "B19001A_001"
)

d_acs = get_acs(
  geography = "county",
  variables = my_variables_income, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

d_acs$NAME <- gsub(" County, Massachusetts", "", d_acs$NAME)

map9 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Greens",
              title = "ACS Estimate, 2022",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Average Household Income of Nonwhite families in MA",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 

map9 + tm_view(set.view = c(-71.5, 42.3, 7.5))

```


```{r}

map9 + tm_view(set.view = c(-71.5, 42.3, 7.5))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

# B19001A_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (White)
# B19001B_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Black)
# B19001C_001 = native
# B19001D_001 = asian 
# B19001I_001 = hispanic
# B19001_001 = average


income_white = "B19001A_001"
income_black = "B19001B_001" 

d_acs = get_acs(
  geography = "county",
  variables = "B19001D_001", 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

map6 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Greens",
              title = "ACS Estimate, 2022",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000),
              popup.vars = c("estimate")) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Average Household Income of Asian families in MA",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 

#leaflet_map <- tmap_leaflet(map6)

```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}


map6 + tm_view(set.view = c(-71.5, 42.3, 7.5))
```

```{r}

# B25012_011 = Renter-occupied housing units With related children of the householder under 18:

# B17018_005 = Income in the past 12 months below poverty level, Married-couple family, High school                       graduate (includes equivalency)
# B17018_006 = Income in the past 12 months below poverty level, Married-couple family, Some college,                      associate's degree
# B17018_007 = Income in the past 12 months below poverty level, Married-couple family, Bachelor's degree                 or higher

# B17019_004 = Income in the past 12 months below poverty level, Married-couple family, Owner occupied
# B17019_005 = Income in the past 12 months below poverty level, Married-couple family, Renter occupied


```

```{r}

#Estimate!!Total:!!Income in the past 12 months at or above poverty level:!!Married-couple family:!!Bachelor's degree or higher

h_acs_wide <- get_acs(
  geography = "county",
  variables = c(college = "B17018_024", 
                hs = "B17018_022"), 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = FALSE,
  output = "wide"
)


h_acs_wide <- h_acs_wide %>% 
  mutate(County = str_remove(NAME, " County, Massachusetts"))  


college_bar_plot <- h_acs_wide %>% 
  ggplot(aes(x = reorder(County, collegeE), y = collegeE)) +
  geom_col(alpha = 0.8, width = 0.7) +  
  theme_wsj() + 
  labs(title = "Income of MA Families by Educational Attaintment", 
       subtitle = "Bachelor's Degree or higher", 
       y = "Average Income",  
       x = "",
       caption = "Source: 2022 ACS")   


college_bar_plot <- college_bar_plot +
  theme(
    plot.title = element_text(size = 14),  
    plot.subtitle = element_text(size = 12),  
    axis.text = element_text(size = 7), 
    panel.grid.major.x = element_blank(),  
    panel.grid.minor.x = element_blank(),
    plot.caption = element_text(size = 6, face = "italic") 
  )

print(rent_bar_plot)

```

```{r}

h_acs_wide <- get_acs(
  geography = "county",
  variables = c(renter = "B17019_005", 
                owner = "B17018_022"), 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = FALSE,
  output = "wide"
)


h_acs_wide <- h_acs_wide %>% 
  mutate(County = str_remove(NAME, " County, Massachusetts"))  


owner_bar_plot <- h_acs_wide %>% 
  ggplot(aes(x = reorder(County, ownerE), y = ownerE)) +
  geom_col(alpha = 0.8, width = 0.7) +  
  theme_wsj() + 
  labs(title = "Income of MA Families by Educational Attaintment", 
       subtitle = "High-School, or equivalent", 
       y = "Average Income",  
       x = "",
       caption = "Source: 2022 ACS")   


owner_bar_plot <- owner_bar_plot +
  theme(
    plot.title = element_text(size = 14),  
    plot.subtitle = element_text(size = 12),  
    axis.text = element_text(size = 7), 
    panel.grid.major.x = element_blank(),  
    panel.grid.minor.x = element_blank(),
    plot.caption = element_text(size = 6, face = "italic") 
  )

print(owner_bar_plot)


```

```{r}

d_enrollment = read_excel("enrollmentbyracegender.xlsx")

colnames(d_enrollment) = as.character(d_enrollment[1,])

d_enrollment = d_enrollment[-1,]

d_enrollment = d_enrollment %>%
  rename("district_name" = "District Name",
         "district_code" = "District Code", 
         "Black" = "African American",
         "Native_American" = "Native American",
         "Pacific_Islander" = "Native Hawaiian, Pacific Islander",
         "Multi_Race" = "Multi-Race, Non-Hispanic",
         "Non_Binary" = "Non-Binary")

d_enrollment = mutate(d_enrollment, Black = as.numeric(Black),
                        Asian = as.numeric(Asian),
                        Hispanic = as.numeric(Hispanic),
                        White = as.numeric(White),
                        Native_American = as.numeric(Native_American),
                        Pacific_Islander = as.numeric(Pacific_Islander),
                        Multi_Race = as.numeric(Multi_Race), 
                        Males = as.numeric(Males),
                        Females = as.numeric(Females),
                        Non_Binary = as.numeric(Non_Binary))

d_enrollment = d_enrollment %>% mutate(d_enrollment, district_name = str_remove_all(district_name, "((District))"))

d_enrollment = d_enrollment %>% mutate(d_enrollment, district_name = str_remove_all(district_name, "[()]"))

mapping_table <- data.frame(
  district = c("Lexington", "Wellesley", "Dover-Sherborn", "Needham", "Northboro-Southboro", "Hopkinton", "Winchester", "Groton-Dunstable", "Acton-Boxborough", "Westborough"),
  county = c("Middlesex", "Norfolk", "Norfolk, Middlesex", "Norfolk", "Worcester", "Middlesex", "Middlesex", "Middlesex", "Middlesex", "Worcester")
)

d_enrollment$county <- mapping_table$county[match(d_enrollment$district_name, mapping_table$district)]

d_enrollment
                        
```

```{r, echo=FALSE, out.height = 10, out.width = 8}

enroll_fig1 = plot_ly(data = d_enrollment, 
                     x = ~district_name, 
                     y = ~White, 
                     type = 'scatter',
                     text = paste("District:", d_enrollment$district_name,
                                  "<br>Enrollment:", d_enrollment$White,"%"),
                     hoverinfo = 'text',
                     mode = 'markers',
                     marker = list(color = '#70569C')
                     ) %>%
  layout(title = 'Enrollment of White Students by District',
         plot_bgcolor='#F4EEFE',
         margin = list(
                b = 50,
                t = 50),
          xaxis = list(
            title = 'Districts',
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff',
            showticklabels=FALSE),
          yaxis = list(
            title = 'Percentage Enrollment',
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff'))

enroll_fig1


```

```{r, echo=FALSE, fig.height = 8, fig.width = 10}

enroll_fig2 = plot_ly(data = d_enrollment, 
                     x = ~district_name, 
                     y = ~Black, 
                     type = 'scatter', 
                     text = paste("District:", d_enrollment$district_name,
                                  "<br>Enrollment:", d_enrollment$Black,"%"),
                     hoverinfo = 'text',
                     mode = 'markers',
                     marker = list(color = '#70569C')) %>%
  layout(title = 'Enrollment of Black Students by District',
         plot_bgcolor='#F4EEFE',
         margin = list(
                b = 50,
                t = 50),
          xaxis = list(
            title = 'Districts',
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff',
            showticklabels=FALSE),
          yaxis = list(
            title = 'Percentage Enrollment',
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff',
            range = c(0, 100)))

enroll_fig2

```
```{r}

enroll_fig3 = plot_ly(data = d_enrollment, 
                     x = ~district_name, 
                     y = ~Asian, 
                     type = 'scatter', 
                     text = paste("District:", d_enrollment$district_name,
                                  "<br>Enrollment:", d_enrollment$Asian,"%"),
                     hoverinfo = 'text',
                     mode = 'markers',
                     marker = list(color = '#70569C')) %>%
  layout(title = 'Enrollment of Asian Students by District',
         plot_bgcolor='#F4EEFE',
         margin = list(
                b = 50,
                t = 50),
          xaxis = list(
            title = 'Districts',
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff',
            showticklabels=FALSE),
          yaxis = list(
            title = 'Percentage Enrollment',
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff',
            range = c(0, 100)))

enroll_fig3

```
```{r}

enroll_fig4 = plot_ly(data = d_enrollment, 
                     x = ~district_name, 
                     y = ~Hispanic, 
                     type = 'scatter', 
                     text = paste("District:", d_enrollment$district_name,
                                  "<br>Enrollment:", d_enrollment$Hispanic,"%"),
                     hoverinfo = 'text',
                     mode = 'markers',
                     marker = list(color = '#70569C')) %>%
  layout(title = 'Enrollment of Hispanic Students by District',
         plot_bgcolor='#F4EEFE',
         margin = list(
                b = 50,
                t = 50),
          xaxis = list(
            title = 'Districts',
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff',
            showticklabels=FALSE),
          yaxis = list(
            title = 'Percentage Enrollment',
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff',
            range = c(0, 100)))

enroll_fig4

```


```{r}

ma_race_data <- get_acs(
  geography = "county",
  variables = c(
    "White" = "B03002_003",
    "Black" = "B03002_004",
    "Native" = "B03002_005",
    "Asian" = "B03002_006",
    "Hispanic" = "B03002_012",
    "Pacific_Islander" = "B03002_007",
    "Other_Race" = "B03002_008",
    "Two_or_More_Races" = "B03002_009"
  ),
  state = "MA",
  geometry = FALSE,
  output = "wide"
)

ma_race_data = ma_race_data %>%
  rename("Black" = "BlackE",
         "White" = "WhiteE",
         "Asian" = "AsianE",
         "Hispanic" = "HispanicE")

ma_race_data = ma_race_data %>%
 pivot_longer(c('Black', 'White', 'Asian', 'Hispanic'),
              names_to = 'Race',
              values_to = 'Population')

ma_race_data = ma_race_data %>% mutate(ma_race_data, NAME = str_remove_all(NAME, " County, Massachusetts"))

ma_race_plot <- ma_race_data %>%
  ggplot(aes(x = reorder(NAME, Population), y = Population, fill = Race)) +
  geom_col(position = "stack", width = 0.7) +
  scale_fill_brewer(palette = "Set2") +  
  theme_gdocs() +
  labs(
    title = "Population by Race in MA Counties",
    x = "County",
    y = "Population",
    fill = "Race"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text = element_text(size = 6), 
  ) +
  scale_y_continuous(labels = scales::comma)

ma_race_plot

```


```{r, echo=FALSE, fig.height = 7, fig.width = 8}

top_10_populated <- d_enrollment %>%
  top_n(10, wt = d_enrollment$White)

table1::label(d_enrollment$White) = "Avg Number of White Students in MA School Districts"
dwt = table1::table1(~White, data = d_enrollment)

kable(dwt, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Student Population by Race" = 2))  %>%  
  row_spec(0, bold = TRUE, color = "white") %>%  
  column_spec(1:2, width = "10em") 

```

```{r}

enrollment_columns <- c("county", "district_name", "White", "Black", "Asian", "Hispanic")

specific_districts <- c("Lexington", "Wellesley", "Dover-Sherborn", "Needham", "Northboro-Southboro", "Hopkinton", "Winchester", "Groton-Dunstable", "Acton-Boxborough", "Westborough")
filtered_district <- d_enrollment %>%
  filter(district_name %in% specific_districts)

enrollment_table <- filtered_district %>%
  select(all_of(enrollment_columns))

enrollment_table$district_name <- factor(enrollment_table$district_name, levels = specific_districts)

enrollment_table <- enrollment_table[order(enrollment_table$district_name), ]

enrollment_table$Asian <- paste0(enrollment_table$Asian, "%")
enrollment_table$Black <- paste0(enrollment_table$Black, "%")
enrollment_table$Hispanic <- paste0(enrollment_table$Hispanic, "%")
enrollment_table$White <- paste0(enrollment_table$White, "%")

kable(enrollment_table, col.names = c("County", "District", "Asian", "Black", "Hispanic", "White"), format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Student Population by Race and District" = length(enrollment_columns)))  %>%  
  row_spec(0, bold = TRUE, color = "white", background = "#584A4A") %>%  
  column_spec(1:length(enrollment_columns), width = "10em") 

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

mcas = read_excel("NextGenMCAS.xlsx")

colnames(mcas) = as.character(mcas[1,])

mcas = mcas[-1,]

mcas = mcas %>%
  rename("meets_exceeds" = "M+E %",
         "not_meets" = "NM %", 
         "district" = "District Name")

mcas$meets_exceeds = as.numeric(mcas$meets_exceeds)
mcas$not_meets = as.numeric(mcas$not_meets)

mcas_wide_me <- pivot_wider(mcas, id_cols = district, names_from = "Subject", values_from = "meets_exceeds")
mcas_wide_nm <- pivot_wider(mcas, id_cols = district, names_from = "Subject", values_from = "not_meets")

mapping_table <- data.frame(
  district = c("Lexington", "Wellesley", "Dover-Sherborn", "Needham", "Northboro-Southboro", "Hopkinton", "Winchester", "Groton-Dunstable", "Acton-Boxborough", "Westborough"),
  county = c("Middlesex", "Norfolk", "Norfolk, Middlesex", "Norfolk", "Worcester", "Middlesex", "Middlesex", "Middlesex", "Middlesex", "Worcester")
)

mcas_wide_me$county <- mapping_table$county[match(mcas_wide_me$district, mapping_table$district)]

```

```{r}

mcas_columns <- c("County" = "county", "District" = "district", "Math" = "MATH") 
#top 10, discludes charters
mcas_districts <- c("Lexington", "Wellesley", "Dover-Sherborn", "Needham", "Northboro-Southboro", "Hopkinton", "Winchester", "Groton-Dunstable", "Acton-Boxborough", "Westborough")
filtered_mcas_district <- mcas_wide_me %>%
  filter(district %in% mcas_districts) 

mcas_table <- filtered_mcas_district %>%
  select(all_of(mcas_columns)) %>% 
  arrange(desc(Math))


kable(mcas_table, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Top 10 MCAS Scores by Subject" = length(mcas_columns)))  %>%  
  row_spec(0, bold = TRUE, color = "white", background = "#584A4A") %>%  
  column_spec(1:length(mcas_columns), width = "10em") 

```


```{r}

mcas_columns <- c("district", "meets_exceeds", "not_meets")

specific_districts <- c("Lexington", "Acton-Boxborough", "Harvard", "Dover-Sherborn", "Weston", "Brookline", "Hamilton-Wenham", "Hingham")
filtered_district <- d_enrollment %>%
  filter(district_name %in% specific_districts)

enrollment_table <- filtered_district %>%
  select(all_of(enrollment_columns))

kable(enrollment_table, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Student Population by Race and District" = length(enrollment_columns)))  %>%  
  row_spec(0, bold = TRUE, color = "white", background = "#0073e6") %>%  
  column_spec(1:length(enrollment_columns), width = "10em") 

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}
#descriptive statistics

table1::label(d_enrollment$Black) = "Avg # of Black Students in MA School Districts"
dbt = table1::table1(~Black, data = d_enrollment)

kable(dbt, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Student Population by Race" = 2))  %>%  
  row_spec(0, bold = TRUE, color = "white") %>%  
  column_spec(1:2, width = "10em") 

```


```{r}

table1::label(d_enrollment$Asian) = "Avg # of Asian Students in MA School Districts"
dat = table1::table1(~Asian, data = d_enrollment)

kable(dat, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Student Population by Race" = 2))  %>%  
  row_spec(0, bold = TRUE, color = "white") %>%  
  column_spec(1:2, width = "10em") 

```
```{r}

table1::label(d_enrollment$Hispanic) = "Avg # of Hispanic Students in MA School Districts"
dht = table1::table1(~Hispanic, data = d_enrollment)

kable(dht, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Student Population by Race" = 2))  %>%  
  row_spec(0, bold = TRUE, color = "white") %>%  
  column_spec(1:2, width = "10em") 

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

income_variables = c(income_white = "B19001A_001",
                     income_black = "B19001B_001",
                     income_asian = "B19001D_001",
                     income_white = "B19001A_001")

b = get_acs(
  geography = "county",
  variables = "B19001B_001", 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

table1::label(b$estimate) = "Black Household Income, 2022"
bt = table1::table1(~estimate, data = b)

kable(bt, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Average Household Income by Race" = 2))  %>%  
  row_spec(0, bold = TRUE, color = "white") %>%  
  column_spec(1:2, width = "10em") 

```

```{r}

b = get_acs(
  geography = "county",
  variables = "B19001D_001", 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

table1::label(b$estimate) = "Asian Household Income, 2022"
bt = table1::table1(~estimate, data = b)

kable(bt, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Average Household Income by Race" = 2))  %>%
  row_spec(0, bold = TRUE, color = "white") %>%
  column_spec(1:2, width = "10em")


```
```{r}

#Hispanic = "B19001I_001"

w = get_acs(
  geography = "county",
  variables = "B19001I_001", 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

table1::label(w$estimate) = "Hispanic Household Income, 2022"
wt = table1::table1(~estimate, data = w)

kable(wt, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Average Household Income by Race" = 2))  %>%  
  row_spec(0, bold = TRUE, color = "white") %>%  
  column_spec(1:2, width = "10em") 

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

income_white = "B19001A_001"
income_black = "B19001B_001" 

w = get_acs(
  geography = "county",
  variables = "B19001A_001", 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

table1::label(w$estimate) = "White Household Income, 2022"
wt = table1::table1(~estimate, data = w)

kable(wt, format = "html") %>%
  kable_styling(position = "center", full_width = FALSE) %>%
  add_header_above(c("Average Household Income by Race" = 2))  %>%  
  row_spec(0, bold = TRUE, color = "white") %>%  
  column_spec(1:1, width = "10em") 

```

```{r}
#year = 5 year average/trend

gradtrends = read_excel("statetrends.xlsx")

gradtrends$`2021 4 yr` = as.character(gradtrends$`2021 4 yr`)
gradtrends$`2020 4 yr` = as.character(gradtrends$`2020 4 yr`)
gradtrends$`2019 4 yr` = as.character(gradtrends$`2019 4 yr`)
gradtrends$`2018 4yr` = as.character(gradtrends$`2018 4yr`)
gradtrends$`2017 4yr` = as.character(gradtrends$`2017 4yr`)
gradtrends$`2016 4yr` = as.character(gradtrends$`2016 4yr`)
gradtrends$`2015 4yr` = as.character(gradtrends$`2015 4yr`)
gradtrends$`2014 4yr` = as.character(gradtrends$`2014 4yr`)
gradtrends$`2013 4yr` = as.character(gradtrends$`2013 4yr`)
gradtrends$`2012 4yr` = as.character(gradtrends$`2012 4yr`)
gradtrends$`2011 4yr` = as.character(gradtrends$`2011 4yr`)


gradtrends = gradtrends %>% add_row(Group = 'Year',
                                    '2021 4 yr' = '2021',
                                    '2020 4 yr' = '2020',
                                    '2019 4 yr' = '2019',
                                    '2018 4yr' = '2018',
                                    '2017 4yr' = '2017',
                                    '2016 4yr' = '2016',
                                    '2015 4yr' = '2015',
                                    '2014 4yr' = '2014',
                                    '2013 4yr' = '2013',
                                    '2012 4yr' = '2012',
                                    '2011 4yr' = '2011',
                                    '2010 4yr' = '2010',
                                    '2009 4 yr' = '2009',
                                    '2008 4yr' = '2008',
                                    '2007 4yr' = '2007',
                                    '2006 4yr' = '2006',
                                    .before=1)


gradtrends_long = gradtrends %>% 
   rotate_df()
 
colnames(gradtrends_long) = as.character(gradtrends_long[1,])
 
gradtrends_long = gradtrends_long[-1,]
 
gradtrends_long = gradtrends_long %>%
  rename("Black" = "African-American")

gradtrends_long = gradtrends_long %>%
 pivot_longer(c('Black', 'Asian', 'Hispanic', 'White'),
              names_to = 'race',
              values_to = 'grad_rate')

gradtrends_long$grad_rate = as.numeric(gradtrends_long$grad_rate)

gradtrends_long$Year = as.character(gradtrends_long$Year)

gradtrends_long = na.omit(gradtrends_long)

#shiny app project


```

```{r, echo=FALSE, fig.height = 7, fig.width = 10, fig.align="center"}

gradtrends_plot = gradtrends_long %>% 
  ggplot(mapping = aes(x = Year, y = grad_rate, color = race, na.rm = TRUE)) +
  geom_line(aes(group = race, fill = race)) +
  labs(title = "MA High School Graduation Trends, 2006 - 2021", 
       caption = "Source: MA DESE",
       x = "Year",
       y = "Graduation Rate",
       color = "4-Year Graduation Rates, by Race"
       ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1.5, hjust=1),
        axis.text.y = element_text(vjust = 4, hjust= 1),
        plot.title = element_text(hjust = 1), 
        plot.caption = element_text(hjust = 0, face = "italic")) + 
  scale_color_brewer(palette = "Set2") + 
  scale_y_continuous(labels = function(y) paste0(y, '%'))

gradtrends_plot

# ggplotly(gradtrends_plot) %>%
#   layout(xaxis = list(
#       rangeselector = list(
#         buttons = list(
#           list(
#             count = 3,
#             label = "3 mo",
#             step = "month",
#             stepmode = "backward"),
#           list(
#             count = 6,
#             label = "6 mo",
#             step = "month",
#             stepmode = "backward"),
#           list(
#             count = 1,
#             label = "1 yr",
#             step = "year",
#             stepmode = "backward"),
#           list(
#             count = 1,
#             label = "YTD",
#             step = "year",
#             stepmode = "todate"),
#           list(step = "all"))),
#     rangeslider = list(type = "date")))
```

```{r}
library(plotly)
accumulate_by = function(dat, var) {
  var = lazyeval::f_eval(var, dat)
  lvls = plotly:::getLevels(var)
  dats = lapply(seq_along(lvls), function(x) {
    cbind(dat[var %in% lvls[seq(0, x)], ], frame = lvls[[x]])
  })
  dplyr::bind_rows(dats)
}

gt = gradtrends_long 
gt$Year = as.numeric(gt$Year)
gt_fig = gt 
gt_fig = gt_fig %>% accumulate_by(~Year)


gt_fig = gt_fig %>%
  plot_ly(
    x = ~Year, 
    y = ~grad_rate,
    color = ~race,
    frame = ~frame, 
    colors = "Set2",
    type = 'scatter',
    mode = 'lines', 
    line = list(simplyfy = F)) 

gt_fig = gt_fig %>% layout(
  title = "MA High School Graduation Trends, 2006-2021",
  margin = list(
    b = 65,
    t = 50
  ),
  xaxis = list(
    title = "Year",
    zeroline = F),
  yaxis = list(
    title = "Percent Graduated",
    zeroline = F)) 

gt_fig = gt_fig %>% animation_opts(
  frame = 100, 
  transition = 0, 
  # redraw = TRUE) 
  redraw = FALSE) 
gt_fig = gt_fig %>% animation_slider(
  hide = T) 

gt_fig = gt_fig %>% animation_button(
  x = 1, xanchor = "right", y = 0, yanchor = "bottom")

gt_fig

```


```{r}

suffolk_income <- get_acs(
  geography = "tract",
  variables = "B19013_001",
  state = "MA",
  county = "Suffolk",
  geometry = TRUE,
  year = 2022)

```

```{r, echo=FALSE, fig.height = 7, fig.width = 10, fig.align="center"}

mb_access_token("sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg", overwrite=TRUE, install = TRUE)


suffolk_income <- get_acs(
  geography = "tract",
  variables = "B19013_001",
  state = "MA",
  county = "Suffolk",
  geometry = TRUE,
  year = 2022)

suffolk_tiles <- get_static_tiles(
  location = suffolk_income,
  zoom = 9,
  style_id = "light-v9",
  username = "mapbox",
  access_token = "sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg")

tm_shape(suffolk_tiles) + 
  tm_rgb() + 
  tm_shape(suffolk_income) + 
  tm_polygons(col = "estimate",  
              alpha = 0.5, palette = "cividis", 
              title = "Median household income\n2022 ACS") + 
  tm_layout(legend.outside = TRUE) + 
  tm_credits("Basemap © Mapbox, © OpenStreetMap", position = c("RIGHT", "BOTTOM"))

```

```{r}

norfolk_income <- get_acs(
  geography = "tract",
  variables = "B19013_001",
  state = "MA",
  county = "Norfolk",
  geometry = TRUE,
  year = 2022)

norfolk_tiles <- get_static_tiles(
  location = norfolk_income,
  zoom = 9,
  style_id = "light-v9",
  username = "mapbox",
  access_token = "sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg")

tm_shape(norfolk_tiles) + 
  tm_rgb() + 
  tm_shape(norfolk_income) + 
  tm_polygons(col = "estimate",  
              alpha = 0.5, palette = "cividis", 
              title = "Median household income") + 
  tm_layout(legend.outside = TRUE) + 
  tm_credits("Basemap © Mapbox, © OpenStreetMap", position = c("RIGHT", "BOTTOM"))


```




```{r}

ma_income <- get_acs(
  geography = "tract",
  variables = "B19013_001",
  state = "MA",
  geometry = TRUE,
  year = 2022)

ma_tiles <- get_static_tiles(
  location = ma_income,
  zoom = 9,
  style_id = "light-v9",
  username = "mapbox",
  access_token = "sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg")

tm_shape(ma_tiles) + 
  tm_rgb() + 
  tm_shape(ma_income) + 
  tm_polygons(col = "estimate",  
              alpha = 0.5, palette = "cividis", 
              title = "Median household income",
              subtitle = "Middlesex County") + 
  tm_layout(legend.outside = TRUE) + 
  tm_credits("Basemap © Mapbox, © OpenStreetMap", position = c("RIGHT", "BOTTOM"))




```






