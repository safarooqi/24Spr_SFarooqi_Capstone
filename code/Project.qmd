```{r setup, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE, include=FALSE}

#install.packages("")

library(tidyverse)
library(tidycensus)
library(tigris)
library(sf) 
library(tmap)
library(dplyr)
library(ggthemes)
library(RColorBrewer)
library(plotly)
library(readxl)
library(huxtable)
library(table1)
library(kableExtra)
library(readxl)
library(sjmisc)
library(mapboxapi)
library(tmap)
library(ggplot2)

mb_access_token("sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg", overwrite=TRUE, install = TRUE)

```

## The Background

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

#v = load_variables(2022, "acs1", cache = TRUE)
#View(v)

#B05010_002 - total ratio for income to poverty level, children under 18
#B05010_003 - two parents
#B05010_004 - two parents native
#B05010_005 - two parents foreign born
#B05010_006 - one native one foreign born parents
#B05010_007 - one parent
#B05010_008 - one parent native
#B05010_009 - one parent foreign born


twoparentsn = "B05010_004"
twoparentsf = "B05010_005"


d_acs = get_acs(
  geography = "county",
  variables = twoparentsn, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

map1 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Poverty Level Amongst Native Born Children under 18",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica")

```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}

map1 + tm_view(set.view = c(-105, 48, 3))


```

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

#v = load_variables(2022, "acs1", cache = TRUE)
#View(v)

#B05010_002 - total ratio for income to poverty level, children under 18
#B05010_003 - two parents
#B05010_004 - two parents native
#B05010_005 - two parents foreign born
#B05010_006 - one native one foreign born parents
#B05010_007 - one parent
#B05010_008 - one parent native
#B05010_009 - one parent foreign born


twoparentsn = "B05010_004"
twoparentsf = "B05010_005"

d_acs = get_acs(
  geography = "county",
  variables = twoparentsf, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

map2 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Poverty Level Amongst Foreign Born Children under 18",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica")

```

```{r, fig.height=5, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}

map2 + tm_view(set.view = c(-105, 48, 3))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

#v = load_variables(2022, "acs1", cache = TRUE)
#View(v)

# B11012_003 = Married-couple household, With children of the householder under 18 years
# B11012_010 = Female householder, With children of the householder under 18 years
#	B11012_015 = Male householder, With children of the householder under 18 years
# B11017_001 = multi-generational households, total

# B17010B_004 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (Black or African American Alone Householder)
# B17010A_024 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (white)
# B17010C_024 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (Native American)
# B17010D_024 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (Asian)
# B17010G_024 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (two or more races)
# B17010I_004 = Poverty Status in the Past 12 Months Married-couple family With related children under 18                  years (hispanic)


my_variables2 = c(
  households = "B11012_003"
  )

d_acs = get_acs(
  geography = "county",
  variables = my_variables2, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

map3 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Households with Children Under 18",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 

```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}

map3 + tm_view(set.view = c(-105, 48, 3))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

# B25012_011 = Renter-occupied housing units With related children of the householder under 18:

# B19001A_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (White)
# B19001B_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Black)
# B19001C_001 = native
# B19001D_001 = asian 
# B19001I_001 = hispanic
# B19001_001 = average

renter_children = "B25012_011"

d_acs = get_acs(
  geography = "county",
  variables = renter_children, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

map4 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Number of Renter-occupied housing units With children under 18",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 

```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}


map4 + tm_view(set.view = c(-105, 48, 3))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

# B25012_011 = Renter-occupied housing units With related children of the householder under 18:

# B19001A_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (White)
# B19001B_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Black)
# B19001C_001 = native
# B19001D_001 = asian 
# B19001I_001 = hispanic
# B19001_001 = average

income_white = "B19001A_001"
income_black = "B19001B_001" 

d_acs = get_acs(
  geography = "county",
  variables = income_white, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

map5 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Household Income of White families in MA",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 

```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}


map5 + tm_view(set.view = c(-105, 48, 3))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE}

census_api_key("c9264540e1e33a3c55dacba891cde5dd6a5ebb5e", overwrite = TRUE)

tmap_mode("view")

# B19001A_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (White)
# B19001B_001 = Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) (Black)
# B19001C_001 = native
# B19001D_001 = asian 
# B19001I_001 = hispanic
# B19001_001 = average


income_white = "B19001A_001"
income_black = "B19001B_001" 

d_acs = get_acs(
  geography = "county",
  variables = income_black, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

map6 = tm_shape(d_acs, projection="+proj=eck4") + 
  tm_polygons("estimate",
              n = 6,
              id = "NAME",
              palette = "Blues",
              title = "ACS Estimate",
              legend.hist = TRUE,
              alpha = 0.7, 
              breaks = c(0, 40000, 120000, 200000, 350000, 600000, 1000000, 1500000)) + 
  tm_borders(lwd = .50, 
             col = "black",
             alpha = 1) +
  tm_layout(inner.margins=c(0,0,.1,0), 
            title.size=.8,
            title = "Household Income of Black families in MA",
            frame = TRUE,
            legend.outside = TRUE,
            legend.hist.width = 5,
            fontfamily = "Helvetica") 

```

```{r, fig.height=7, fig.width=10, fig.align="center", echo=FALSE, message=FALSE, warning=FALSE}


map6 + tm_view(set.view = c(-105, 48, 3))
```

```{r}

# B25012_011 = Renter-occupied housing units With related children of the householder under 18:

# B17018_005 = Income in the past 12 months below poverty level, Married-couple family, High school                       graduate (includes equivalency)
# B17018_006 = Income in the past 12 months below poverty level, Married-couple family, Some college,                      associate's degree
# B17018_007 = Income in the past 12 months below poverty level, Married-couple family, Bachelor's degree                 or higher

# B17019_004 = Income in the past 12 months below poverty level, Married-couple family, Owner occupied
# B17019_005 = Income in the past 12 months below poverty level, Married-couple family, Renter occupied

income_rent_own = c("B17019_005", "B17019_004")

h_acs = get_acs(
  geography = "county",
  variables = income_rent_own, 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")


accumulate_by = function(dat, var) {
  var = lazyeval::f_eval(var, dat)
  lvls = plotly:::getLevels(var)
  dats = lapply(seq_along(lvls), function(x) {
    cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
  })
  dplyr::bind_rows(dats)
}

df = h_acs 
rent_own_fig = df %>%
  filter(df$variable, "B17019_005" == "renter", "B17019_004" == "owner")

#rent_own_fig = rent_own_fig %>% accumulate_by(~date)


rent_own_fig = rent_own_fig %>%
  plot_ly(
    x = ~date, 
    y = ~median,
    split = ~variables,
    frame = ~frame, 
    type = 'scatter',
    mode = 'lines', 
    line = list(simplyfy = F)
  )
rent_own_fig = rent_own_fig %>% layout(
  xaxis = list(
    title = "Date",
    zeroline = F
  ),
  yaxis = list(
    title = "Median",
    zeroline = F
  )
) 
rent_own_fig = rent_own_fig %>% animation_opts(
  frame = 100, 
  transition = 0, 
  redraw = FALSE
)
rent_own_fig = rent_own_fig %>% animation_slider(
  hide = T
)
rent_own_fig = rent_own_fig %>% animation_button(
  x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)

rent_own_fig

```

```{r}

h_acs_wide = get_acs(
  geography = "county",
  variables = c(renter = "B17019_005", 
                owner = "B17019_004"), 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = FALSE,
  output = "wide")

rent_bar_plot = h_acs_wide %>% 
  mutate(NAME = str_remove(NAME, "County, Massachusetts")) %>% 
  ggplot(aes(y = reorder(NAME, renterE), x = renterE)) +
  geom_col() +  
  theme_minimal() + 
  labs(title = "Average Income for Renters by MA County", 
       subtitle = "2022 1-year ACS estimates", 
       y = "", 
       x = "ACS estimate")

rent_bar_plot

```

```{r}

h_acs_wide = get_acs(
  geography = "county",
  variables = c(renter = "B17019_005", 
                owner = "B17019_004"), 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = FALSE,
  output = "wide")

rent_bar_plot = h_acs_wide %>% 
  mutate(NAME = str_remove(NAME, "County, Massachusetts")) %>% 
  ggplot(aes(y = reorder(NAME, ownerE), x = ownerE)) +
  geom_col(alpha = 0.5, width = 0.85) +  
  theme_minimal() +
  labs(title = "Average Income for Homeowners by MA County", 
       subtitle = "2022 1-year ACS estimates", 
       y = "", 
       x = "ACS estimate")

rent_bar_plot

```

```{r}

d_enrollment = read_excel("enrollmentbyracegender.xlsx")

colnames(d_enrollment) = as.character(d_enrollment[1,])

d_enrollment = d_enrollment[-1,]

d_enrollment = d_enrollment %>%
  rename("district_name" = "District Name",
         "district_code" = "District Code", 
         "Black" = "African American",
         "Native_American" = "Native American",
         "Pacific_Islander" = "Native Hawaiian, Pacific Islander",
         "Multi_Race" = "Multi-Race, Non-Hispanic",
         "Non_Binary" = "Non-Binary")

d_enrollment = mutate(d_enrollment, Black = as.numeric(Black),
                        Asian = as.numeric(Asian),
                        Hispanic = as.numeric(Hispanic),
                        White = as.numeric(White),
                        Native_American = as.numeric(Native_American),
                        Pacific_Islander = as.numeric(Pacific_Islander),
                        Multi_Race = as.numeric(Multi_Race), 
                        Males = as.numeric(Males),
                        Females = as.numeric(Females),
                        Non_Binary = as.numeric(Non_Binary))
                        

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

plot1 = plot(d_enrollment$White)
plot1

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

plot2 = plot(d_enrollment$Black)
plot2  

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

#descriptive statistics

table1::label(d_enrollment$White) = "Avg # of White Students in MA School Districts"
dwt = table1::table1(~White, data = d_enrollment)

t1kable(dwt) %>%
  kable_styling(position = "center")

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

#descriptive statistics

table1::label(d_enrollment$Black) = "Avg # of Black Students in MA School Districts"
dbt = table1::table1(~Black, data = d_enrollment)

t1kable(dbt) %>%
  kable_styling(position = "center")

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

income_white = "B19001A_001"
income_black = "B19001B_001" 

b = get_acs(
  geography = "county",
  variables = "B19001B_001", 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

table1::label(b$estimate) = "Black Household Income, 2022"
bt = table1::table1(~estimate, data = b)

t1kable(pt) %>%
  kable_styling(position = "center")

```

```{r, echo=FALSE, fig.height = 7, fig.width = 8}

income_white = "B19001A_001"
income_black = "B19001B_001" 

w = get_acs(
  geography = "county",
  variables = "B19001A_001", 
  state = "MA",
  year = 2022,
  survey = "acs1",
  geometry = TRUE,
  resolution = "20m")

table1::label(w$estimate) = "White Household Income, 2022"
wt = table1::table1(~estimate, data = w)

t1kable(wt) %>%
  kable_styling(position = "center")

```

```{r}
#year = 5 year average/trend

gradtrends = read_excel("statetrends.xlsx")

gradtrends$`2021 4 yr` = as.character(gradtrends$`2021 4 yr`)
gradtrends$`2020 4 yr` = as.character(gradtrends$`2020 4 yr`)
gradtrends$`2019 4 yr` = as.character(gradtrends$`2019 4 yr`)
gradtrends$`2018 4yr` = as.character(gradtrends$`2018 4yr`)
gradtrends$`2017 4yr` = as.character(gradtrends$`2017 4yr`)
gradtrends$`2016 4yr` = as.character(gradtrends$`2016 4yr`)
gradtrends$`2015 4yr` = as.character(gradtrends$`2015 4yr`)
gradtrends$`2014 4yr` = as.character(gradtrends$`2014 4yr`)
gradtrends$`2013 4yr` = as.character(gradtrends$`2013 4yr`)
gradtrends$`2012 4yr` = as.character(gradtrends$`2012 4yr`)
gradtrends$`2011 4yr` = as.character(gradtrends$`2011 4yr`)


gradtrends = gradtrends %>% add_row(Group = 'Year',
                                    '2021 4 yr' = '2021',
                                    '2020 4 yr' = '2020',
                                    '2019 4 yr' = '2019',
                                    '2018 4yr' = '2018',
                                    '2017 4yr' = '2017',
                                    '2016 4yr' = '2016',
                                    '2015 4yr' = '2015',
                                    '2014 4yr' = '2014',
                                    '2013 4yr' = '2013',
                                    '2012 4yr' = '2012',
                                    '2011 4yr' = '2011',
                                    '2010 4yr' = '2010',
                                    '2009 4 yr' = '2009',
                                    '2008 4yr' = '2008',
                                    '2007 4yr' = '2007',
                                    '2006 4yr' = '2006',
                                    .before=1)


 gradtrends_long = gradtrends %>% 
   rotate_df()
 
 colnames(gradtrends_long) = as.character(gradtrends_long[1,])
 
  gradtrends_long = gradtrends_long[-1,]
 
gradtrends_long = gradtrends_long %>%
  rename("Black" = "African-American")

gradtrends_long = gradtrends_long %>%
  pivot_longer(c('Black', 'Asian', 'Hispanic', 'White'),
               names_to = 'race',
               values_to = 'grad_rate')

gradtrends_long$grad_rate = as.numeric(gradtrends_long$grad_rate)

gradtrends_long$Year = as.character(gradtrends_long$Year)

#shiny app project


```

```{r, echo=FALSE, fig.height = 7, fig.width = 10, fig.align="center"}

gradtrends_plot = gradtrends_long %>% 
  ggplot(mapping = aes(x = Year, y = grad_rate, color = race, na.rm = TRUE)) +
  geom_line(aes(group = race, fill = race)) +
  labs(title = "MA High School Graduation Rate, 2006-2020", 
       caption = "Source: MA DESE",
       x = "Date",
       y = "Graduation Rate",
       color = "4-year Graduation Rates by Race"
       ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1),
        axis.text.y = element_text(vjust = 0.2, hjust= 0.5),
        plot.title = element_text(hjust = 0.5), 
        plot.caption = element_text(hjust = 0, face = "italic")) + 
  scale_color_brewer(palette = "Accent") + 
  scale_y_continuous(labels = function(y) paste0(y, '%'))

gradtrends_plot

# ggplotly(gradtrends_plot) %>% 
#   layout(xaxis = list(
#       rangeselector = list(
#         buttons = list(
#           list(
#             count = 3,
#             label = "3 mo",
#             step = "month",
#             stepmode = "backward"),
#           list(
#             count = 6,
#             label = "6 mo",
#             step = "month",
#             stepmode = "backward"),
#           list(
#             count = 1,
#             label = "1 yr",
#             step = "year",
#             stepmode = "backward"),
#           list(
#             count = 1,
#             label = "YTD",
#             step = "year",
#             stepmode = "todate"),
#           list(step = "all"))),
#     rangeslider = list(type = "date")))
```

```{r}
 
plymouth_income <- get_acs(
  geography = "tract",
  variables = "B19013_001",
  state = "MA",
  county = "Plymouth",
  geometry = TRUE,
  year = 2021)
 
```

```{r, echo=FALSE, fig.height = 7, fig.width = 10, fig.align="center"}

mb_access_token("sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg", overwrite=TRUE, install = TRUE)

plymouth_tiles <- get_static_tiles(
  location = plymouth_income,
  zoom = 9,
  style_id = "light-v9",
  username = "mapbox",
  access_token = "sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg")

tm_shape(plymouth_tiles) + 
  tm_rgb() + 
  tm_shape(plymouth_income) + 
  tm_polygons(col = "estimate",  
              alpha = 0.5, palette = "cividis", 
              title = "Median household income\n2021 ACS") + 
  tm_layout(legend.outside = TRUE) + 
  tm_credits("Basemap © Mapbox, © OpenStreetMap", position = c("RIGHT", "BOTTOM"))

```

```{r}

norfolk_income <- get_acs(
  geography = "tract",
  variables = "B19013_001",
  state = "MA",
  county = "Norfolk",
  geometry = TRUE,
  year = 2021)

```

```{r}

norfolk_tiles <- get_static_tiles(
  location = norfolk_income,
  zoom = 9,
  style_id = "light-v9",
  username = "mapbox",
  access_token = "sk.eyJ1Ijoic2FtaWhhZiIsImEiOiJjbHU3Zno0YWYwNjFkMmpuMGR0emlodjJiIn0.OsHYgeCC11tk09PVtKbtBg")

tm_shape(norfolk_tiles) + 
  tm_rgb() + 
  tm_shape(norfolk_income) + 
  tm_polygons(col = "estimate",  
              alpha = 0.5, palette = "cividis", 
              title = "Median household income\n2021 ACS") + 
  tm_layout(legend.outside = TRUE) + 
  tm_credits("Basemap © Mapbox, © OpenStreetMap", position = c("RIGHT", "BOTTOM"))


```

```{r}






```
